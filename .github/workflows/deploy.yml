# .github/workflows/deploy.yml - CORRECTION CHEMIN CRITIQUE
name: Deploy Critical Path Fix

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  critical-path-optimization:
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Fix permissions
        run: chmod +x deploy.js

      - name: Generate deployment
        run: npm run deploy

      # ‚úÖ CORRECTION CRITIQUE - Supprime les pr√©chargements excessifs
      - name: Fix critical path - Remove excessive font preloads
        run: |
          echo "üö® CORRECTION CHEMIN CRITIQUE - Suppression pr√©chargements excessifs..."
          
          INDEX_FILE="dist/index.html"
          
          if [ -f "$INDEX_FILE" ]; then
              echo "üìù Analyse du HTML avant correction..."
              PRELOAD_COUNT_BEFORE=$(grep -c 'rel="preload".*font' "$INDEX_FILE" || echo "0")
              echo "   ‚Ä¢ Pr√©chargements polices avant: $PRELOAD_COUNT_BEFORE"
          
              # Sauvegarder le fichier original
              cp "$INDEX_FILE" "$INDEX_FILE.backup"
          
              # ‚úÖ SUPPRESSION DES PR√âCHARGEMENTS EXCESSIFS
              # Garder seulement Regular et Bold
              echo "üîß Suppression des pr√©chargements non critiques..."
          
              # Supprimer les pr√©chargements de polices secondaires
              sed -i '/rel="preload".*BricolageGrotesque-SemiBold\.woff2/d' "$INDEX_FILE"
              sed -i '/rel="preload".*BricolageGrotesque-Light\.woff2/d' "$INDEX_FILE"
              sed -i '/rel="preload".*BricolageGrotesque-ExtraBold\.woff2/d' "$INDEX_FILE"
              sed -i '/rel="preload".*BricolageGrotesque-ExtraLight\.woff2/d' "$INDEX_FILE"
              sed -i '/rel="preload".*BricolageGrotesque-Medium\.woff2/d' "$INDEX_FILE"
          
              # Supprimer les variantes condens√©es si pr√©sentes
              sed -i '/rel="preload".*BricolageGrotesque10pt/d' "$INDEX_FILE"
          
              echo "‚úÖ Pr√©chargements non critiques supprim√©s"
          
              # V√©rification apr√®s suppression
              PRELOAD_COUNT_AFTER=$(grep -c 'rel="preload".*font' "$INDEX_FILE" || echo "0")
              echo "   ‚Ä¢ Pr√©chargements polices apr√®s: $PRELOAD_COUNT_AFTER"
          
              if [ "$PRELOAD_COUNT_AFTER" -le 2 ]; then
                  echo "‚úÖ Optimisation r√©ussie: Maximum 2 polices pr√©charg√©es"
              else
                  echo "‚ö†Ô∏è Attention: Encore $PRELOAD_COUNT_AFTER polices pr√©charg√©es"
              fi
          
              # Ajouter script de chargement diff√©r√© si pas d√©j√† pr√©sent
              if ! grep -q "secondary-fonts-loading" "$INDEX_FILE"; then
                  echo "üìù Ajout du script de chargement diff√©r√©..."
          
                  # Cr√©er le script d'optimisation
                  cat >> font_loading_script.js << 'FONT_SCRIPT'
          
          // Script de chargement intelligent des polices
          (function() {
              if ('fonts' in document) {
                  // Chargement des polices critiques
                  Promise.all([
                      document.fonts.load('400 1em "Bricolage Grotesque"'),
                      document.fonts.load('700 1em "Bricolage Grotesque"')
                  ]).then(function() {
                      document.documentElement.classList.add('fonts-loaded');
          
                      // Chargement diff√©r√© des polices secondaires
                      setTimeout(function() {
                          const secondaryFonts = [
                              '600 1em "Bricolage Grotesque"',
                              '300 1em "Bricolage Grotesque"',
                              '500 1em "Bricolage Grotesque"',
                              '800 1em "Bricolage Grotesque"',
                              '200 1em "Bricolage Grotesque"'
                          ];
          
                          secondaryFonts.forEach(font => {
                              document.fonts.load(font).catch(() => {});
                          });
                      }, 200);
                  });
              }
          })();
          FONT_SCRIPT
          
                  # Injecter le script dans le HTML
                  sed -i '/<script>/i\    <script>' "$INDEX_FILE"
                  sed -i '/<script>/r font_loading_script.js' "$INDEX_FILE"
                  sed -i '/<script>/a\    </script>' "$INDEX_FILE"
          
                  rm font_loading_script.js
                  echo "‚úÖ Script de chargement diff√©r√© ajout√©"
              fi
          
          else
              echo "‚ùå Fichier index.html non trouv√©"
              exit 1
          fi

      # ‚úÖ .htaccess final avec toutes les optimisations
      - name: Create final optimized htaccess
        run: |
          echo "üîß Cr√©ation .htaccess final avec optimisations compl√®tes..."
          
          cat > dist/.htaccess << 'FINAL_HTACCESS'
          # htaccess FINAL - Chemin critique optimis√© + Cache
          
          <IfModule mod_rewrite.c>
              RewriteEngine On
              RewriteCond %{REQUEST_FILENAME} !-f
              RewriteCond %{REQUEST_FILENAME} !-d
              RewriteRule . /index.html [L]
          </IfModule>
          
          <IfModule mod_expires.c>
              ExpiresActive On
          
              # POLICES - Cache 1 an (elimine 32 KiB)
              ExpiresByType font/woff2 "access plus 1 year"
              ExpiresByType font/woff "access plus 1 year"
              ExpiresByType application/font-woff2 "access plus 1 year"
              ExpiresByType application/font-woff "access plus 1 year"
          
              # CSS - Cache 1 an (elimine main.css, critical.css)
              ExpiresByType text/css "access plus 1 year"
          
              # JS - Cache 1 an (elimine script.js)
              ExpiresByType application/javascript "access plus 1 year"
              ExpiresByType application/x-javascript "access plus 1 year"
          
              # SVG - Cache 1 an (elimine logos)
              ExpiresByType image/svg+xml "access plus 1 year"
          
              # IMAGES - Cache 1 an
              ExpiresByType image/png "access plus 1 year"
              ExpiresByType image/webp "access plus 1 year"
              ExpiresByType image/jpg "access plus 1 year"
              ExpiresByType image/jpeg "access plus 1 year"
          
              # HTML - Cache court
              ExpiresByType text/html "access plus 1 hour"
          </IfModule>
          
          <IfModule mod_headers.c>
              # POLICES - Headers immutables + font-display
              <FilesMatch "\.(woff2|woff|ttf|otf|eot)$">
                  Header set Cache-Control "public, max-age=31536000, immutable"
                  Header set Access-Control-Allow-Origin "*"
                  Header set X-Font-Display "swap"
                  Header set X-Critical-Path "optimized"
              </FilesMatch>
          
              # CSS - Headers immutables
              <FilesMatch "\.css$">
                  Header set Cache-Control "public, max-age=31536000, immutable"
                  Header set X-CSS-Cache "1-year"
              </FilesMatch>
          
              # JS - Headers immutables
              <FilesMatch "\.js$">
                  Header set Cache-Control "public, max-age=31536000, immutable"
                  Header set X-JS-Cache "1-year"
              </FilesMatch>
          
              # SVG - Headers immutables
              <FilesMatch "\.svg$">
                  Header set Cache-Control "public, max-age=31536000, immutable"
                  Header set X-SVG-Cache "1-year"
              </FilesMatch>
          
              # IMAGES
              <FilesMatch "\.(png|jpg|jpeg|webp|gif)$">
                  Header set Cache-Control "public, max-age=31536000, immutable"
                  Header set X-Image-Cache "1-year"
              </FilesMatch>
          
              # HTML
              <FilesMatch "\.html$">
                  Header set Cache-Control "public, max-age=3600, must-revalidate"
              </FilesMatch>
          
              # S√©curit√©
              Header always set X-Content-Type-Options nosniff
              Header always set X-Frame-Options SAMEORIGIN
          </IfModule>
          
          <IfModule mod_mime.c>
              AddType font/woff2 .woff2
              AddType font/woff .woff
              AddType application/font-woff2 .woff2
              AddType application/font-woff .woff
              AddType image/webp .webp
              AddType image/svg+xml .svg
          </IfModule>
          
          <IfModule mod_deflate.c>
              AddOutputFilterByType DEFLATE text/css
              AddOutputFilterByType DEFLATE application/javascript
              AddOutputFilterByType DEFLATE image/svg+xml
              AddOutputFilterByType DEFLATE text/html
              SetEnvIfNoCase Request_URI \.(woff|woff2|png|jpg|jpeg|webp)$ no-gzip
          </IfModule>
          FINAL_HTACCESS
          
          echo "‚úÖ .htaccess final cr√©√©"
